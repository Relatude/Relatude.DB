import { DatamodelModel, ModelType, NodeTypeModel, PropertyModel, PropertyType, RelationModel, RelationType } from "./datamodelModels";

export class NodeType {
    public defaultPublicIdPropertyName: string;
    public defaultInternalIdPropertyName: string;
    public id: string;
    public isInterface: boolean;
    public canInherit: boolean;
    public modelType: ModelType;
    public nameOfPublicIdProperty: string;
    public nameOfInternalIdProperty: string;
    public dataTypeOfPublicId: PropertyType;
    public dataTypeOfInternalId: PropertyType;
    public nameOfCollectionProperty: string;
    public nameOfLCIDProperty: string;
    public nameOfDerivedFromLCID: string;
    public nameOfIsDerivedProperty: string;
    public nameOfReadAccessProperty: string;
    public nameOfWriteAccessProperty: string;
    public nameOfCreatedUtcProperty: string;
    public nameOfChangedUtcProperty: string;
    public parents: string[];
    public minNoInstances: number;
    public maxNoInstances: number;
    public namespace: string;
    public codeName: string;
    public textIndex: boolean;
    public semanticIndex: boolean;
    public properties: Map<string, Property> = new Map();
    public fullName: string;
    constructor(model: NodeTypeModel) {
        this.defaultPublicIdPropertyName = model.defaultPublicIdPropertyName;
        this.defaultInternalIdPropertyName = model.defaultInternalIdPropertyName;
        this.id = model.id;
        this.isInterface = model.isInterface;
        this.canInherit = model.canInherit;
        this.modelType = model.modelType;
        this.nameOfPublicIdProperty = model.nameOfPublicIdProperty;
        this.nameOfInternalIdProperty = model.nameOfInternalIdProperty;
        this.dataTypeOfPublicId = model.dataTypeOfPublicId;
        this.dataTypeOfInternalId = model.dataTypeOfInternalId;
        this.nameOfCollectionProperty = model.nameOfCollectionProperty;
        this.nameOfLCIDProperty = model.nameOfLCIDProperty;
        this.nameOfDerivedFromLCID = model.nameOfDerivedFromLCID;
        this.nameOfIsDerivedProperty = model.nameOfIsDerivedProperty;
        this.nameOfReadAccessProperty = model.nameOfReadAccessProperty;
        this.nameOfWriteAccessProperty = model.nameOfWriteAccessProperty;
        this.nameOfCreatedUtcProperty = model.nameOfCreatedUtcProperty;
        this.nameOfChangedUtcProperty = model.nameOfChangedUtcProperty;
        this.parents = model.parents || [];
        this.minNoInstances = model.minNoInstances || 0;
        this.maxNoInstances = model.maxNoInstances || 0;
        this.namespace = model.namespace || "";
        this.codeName = model.codeName || "";
        this.textIndex = !!model.textIndex;
        this.semanticIndex = !!model.semanticIndex;
        if (model.properties) {
            for (const [key, value] of Object.entries(model.properties)) {
                const propertyModel: PropertyModel = value as PropertyModel; // Cast to PropertyModel
                const property: Property = new Property(propertyModel);
                this.properties.set(key, property);
            }
        }
        this.fullName = `${this.namespace}.${this.codeName}`;
    }
}
export class Property {
    public codeName: string;
    public propertyType: PropertyType;
    public isArray: boolean;
    public isRequired: boolean;
    public isPrimaryKey: boolean;
    public isIndex: boolean;
    public isUnique: boolean;
    constructor(model: PropertyModel) {
        this.codeName = model.codeName;
        this.propertyType = model.propertyType;
        this.isArray = model.isArray;
        this.isRequired = model.isRequired;
        this.isPrimaryKey = model.isPrimaryKey;
        this.isIndex = model.isIndex;
        this.isUnique = model.isUnique;
    }
}
export class Relation {
    public id: string;
    public namespace: string;
    public codeName: string;
    public relationType: RelationType;
    public sourceTypes: string[];
    public targetTypes: string[];
    public maxCountTo: number;
    public maxCountFrom: number;
    public cultureSpecific: boolean;
    public autoGenerated: boolean;

    constructor(model: RelationModel) {
        this.id = model.id;
        this.namespace = model.namespace;
        this.codeName = model.codeName;
        this.relationType = model.relationType;
        this.sourceTypes = model.sourceTypes;
        this.targetTypes = model.targetTypes;
        this.maxCountTo = model.maxCountTo;
        this.maxCountFrom = model.maxCountFrom;
        this.cultureSpecific = model.cultureSpecific;
        this.autoGenerated = model.autoGenerated;
    }
}
export class Datamodel {
    private _nodeTypes: Map<string, NodeType> = new Map();
    private _relations: Map<string, Relation> = new Map();
    constructor(model: DatamodelModel) {
        if (model.nodeTypes) {
            this._nodeTypes = new Map<string, NodeType>(Object.entries(model.nodeTypes));
        }
        if (model.relations) {
            this._relations = new Map<string, Relation>(Object.entries(model.relations));
        }
    }
    public getNodeType(id: string): NodeType {
        const nodeType = this._nodeTypes.get(id);
        if (!nodeType) throw new Error(`Node type with id ${id} not found.`);
        return nodeType;
    }
    public getRelation(id: string): Relation {
        const relation = this._relations.get(id);
        if (!relation) throw new Error(`Relation with id ${id} not found.`);
        return relation;
    }
   public getBaseNodeType(): NodeType {
        const baseNodeType = this._nodeTypes.get(NodeConstants.BaseNodeTypeId);
        if (!baseNodeType) throw new Error(`Base node type with id ${NodeConstants.BaseNodeTypeId} not found.`);
        return baseNodeType;
    }
    public getNodeTypes(): NodeType[] {
        return Array.from(this._nodeTypes.values());
    }
}

export class NodeConstants {
    public static readonly BaseNodeTypeId: string = "ac6515ae-3ca5-43fa-8045-7a5a1bb11830";
    public static readonly SystemTextIndexPropertyId: string = "b835577e-84a2-4fa3-a850-44ab2112e6cf";
    public static readonly SystemVectorIndexPropertyId: string = "1e282f9f-3bd2-4230-abcb-f9e840145159";
    public static readonly SystemTextIndexPropertyName: string = "_textIndex";
    public static readonly SystemVectorIndexPropertyName: string = "_vectorIndex";
}
