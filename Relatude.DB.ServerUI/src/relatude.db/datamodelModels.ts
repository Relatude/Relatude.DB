export interface DatamodelModel {
    nodeTypes: object;
    relations: object;
}
export interface NodeTypeModel {
    defaultPublicIdPropertyName: string;
    defaultInternalIdPropertyName: string;
    id: string;
    isInterface: boolean;
    canInherit: boolean;
    modelType: ModelType;
    nameOfPublicIdProperty: string;
    nameOfInternalIdProperty: string;
    dataTypeOfPublicId: PropertyType;
    dataTypeOfInternalId: PropertyType;
    nameOfCollectionProperty: string;
    nameOfLCIDProperty: string;
    nameOfDerivedFromLCID: string;
    nameOfIsDerivedProperty: string;
    nameOfReadAccessProperty: string;
    nameOfWriteAccessProperty: string;
    nameOfCreatedUtcProperty: string;
    nameOfChangedUtcProperty: string;
    parents: string[];
    minNoInstances: number;
    maxNoInstances: number;
    namespace: string;
    codeName: string;
    textIndex: boolean;
    semanticIndex: boolean;
    properties: Map<string, PropertyModel>;
    fullName: string;    
}
export enum ModelType {
    Interface = 0,
    Class = 1,
    Record = 2,
    Struct = 3
}
export enum PropertyType {
    Any = 0,
    Boolean = 1,
    Integer = 2,
    String = 3,
    StringArray = 4,
    Double = 5,
    Float = 6,
    Decimal = 7,
    DateTime = 8,
    TimeSpan = 9,
    Guid = 10,
    Long = 11,
    ByteArray = 12,
    File = 13,
    FloatArray = 14,
    Relation = 100
}
export enum RelationType {
    OneOne = 0, // OneToOne, where both sides are the same
    OneToOne = 1, // OneToOne, where both sides are different
    OneToMany = 2, // OneToMany, where the source has one and the target has many
    ManyMany = 3, // ManyToMany, where both sides can have many
    ManyToMany = 4, // ManyToMany, where both sides can have many, but the relation is not symmetric (e.g. person.parents person.children)
}
export interface PropertyModel {
    id: string;
    codeName: string;
    propertyType: PropertyType;
    isArray: boolean;
    isRequired: boolean;
    isPrimaryKey: boolean;
    isIndex: boolean;
    isUnique: boolean;
    defaultValue: any;
    readAccess: string;
    writeAccess: string;
    cultureSpecific: boolean;
    private: boolean;
    fileStoreId: string;
    excludeFromTextIndex: boolean;
    getDefaultValueAsCode: string;
    getDefaultValue: string;
}
export interface RelationModel {
    id: string;
    namespace: string;
    codeName: string;
    relationType: RelationType;
    sourceTypes: string[];
    targetTypes: string[];
    maxCountTo: number;
    maxCountFrom: number;
    cultureSpecific: boolean;
    autoGenerated: boolean;
}